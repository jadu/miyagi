{"/Users/mikes/Jadu/TensorFlow/Slack/SentimentTraining/src/providers/QuestionProvider.ts": {"path":"/Users/mikes/Jadu/TensorFlow/Slack/SentimentTraining/src/providers/QuestionProvider.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":8,"column":8},"end":{"line":8,"column":39}},"2":{"start":{"line":9,"column":8},"end":{"line":12,"column":10}},"3":{"start":{"line":20,"column":8},"end":{"line":49,"column":10}},"4":{"start":{"line":52,"column":0},"end":{"line":52,"column":35}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":7,"column":4},"end":{"line":7,"column":5}},"loc":{"start":{"line":7,"column":29},"end":{"line":13,"column":5}},"line":7},"1":{"name":"(anonymous_1)","decl":{"start":{"line":19,"column":4},"end":{"line":19,"column":5}},"loc":{"start":{"line":19,"column":36},"end":{"line":50,"column":5}},"line":19}},"branchMap":{},"s":{"0":1,"1":1,"2":1,"3":1,"4":1},"f":{"0":1,"1":1},"b":{},"inputSourceMap":{"version":3,"file":"QuestionProvider.js","sourceRoot":"","sources":["QuestionProvider.ts"],"names":[],"mappings":";;AAGA;IAGI;;OAEG;IACH,YACY,WAAwB;QAAxB,gBAAW,GAAX,WAAW,CAAa;QAEhC,IAAI,CAAC,OAAO,GAAG;YACX;0GAC8F;SACjG,CAAC;IACN,CAAC;IAED;;;;OAIG;IACI,KAAK,CAAE,gBAAkC,EAAE,MAAc;QAC5D,MAAM,CAAC;YACH,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,IAAI,CAAC,OAAO,CAAC;YAClD,WAAW,EAAE;gBACT;oBACI,IAAI,EAAE,IAAI,gBAAgB,CAAC,IAAI,GAAG;oBAClC,WAAW,EAAE,GAAG,gBAAgB,CAAC,GAAG,IAAI,MAAM,EAAE;oBAChD,KAAK,EAAE,SAAS;oBAChB,OAAO,EAAE;wBACL;4BACI,IAAI,EAAE,WAAW;4BACjB,IAAI,EAAE,mBAAmB;4BACzB,IAAI,EAAE,QAAQ;4BACd,KAAK,EAAE,UAAU;yBACpB;wBACD;4BACI,IAAI,EAAE,WAAW;4BACjB,IAAI,EAAE,yBAAyB;4BAC/B,IAAI,EAAE,QAAQ;4BACd,KAAK,EAAE,SAAS;yBACnB;wBACD;4BACI,IAAI,EAAE,WAAW;4BACjB,IAAI,EAAE,mBAAmB;4BACzB,IAAI,EAAE,QAAQ;4BACd,KAAK,EAAE,UAAU;yBACpB;qBACJ;iBACJ;aACJ;SACJ,CAAC;IACN,CAAC;CACJ;AApDD,mCAoDC","sourcesContent":["import ListService from '../services/ListService';\nimport { Question, SentimentExtract } from '../types';\n\nexport default class QuestionProvider {\n    private openers: string[];\n\n    /**\n     * QuestionService\n     */\n    constructor (\n        private listService: ListService\n    ) {\n        this.openers = [\n            `Have you got 5 minutes to help us train our Machine Learning platform?\n            Read the extract below and let me know if you think it is *Positive*, *Negative* or *Neutral*`\n        ];\n    }\n\n    /**\n     * Build Question\n     * @param sentimentExtract\n     * @param userId\n     */\n    public build (sentimentExtract: SentimentExtract, userId: string): Question {\n        return {\n            text: this.listService.getRandomItem(this.openers),\n            attachments: [\n                {\n                    text: `\"${sentimentExtract.text}\"`,\n                    callback_id: `${sentimentExtract._id}:${userId}`,\n                    color: '#3AA3E3',\n                    actions: [\n                        {\n                            name: 'sentiment',\n                            text: ':smile:  Positive',\n                            type: 'button',\n                            value: 'positive'\n                        },\n                        {\n                            name: 'sentiment',\n                            text: ':neutral_face:  Neutral',\n                            type: 'button',\n                            value: 'neutral'\n                        },\n                        {\n                            name: 'sentiment',\n                            text: ':angry:  Negative',\n                            type: 'button',\n                            value: 'negative'\n                        }\n                    ]\n                }\n            ]\n        };\n    }\n}\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"cf3fea14356b3f298c3cb8f823af99f733cc5907"}
,"/Users/mikes/Jadu/TensorFlow/Slack/SentimentTraining/src/services/ListService.ts": {"path":"/Users/mikes/Jadu/TensorFlow/Slack/SentimentTraining/src/services/ListService.ts","statementMap":{"0":{"start":{"line":2,"column":0},"end":{"line":2,"column":62}},"1":{"start":{"line":9,"column":8},"end":{"line":9,"column":43}},"2":{"start":{"line":12,"column":0},"end":{"line":12,"column":30}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":8,"column":4},"end":{"line":8,"column":5}},"loc":{"start":{"line":8,"column":24},"end":{"line":10,"column":5}},"line":8}},"branchMap":{},"s":{"0":2,"1":1,"2":2},"f":{"0":1},"b":{},"inputSourceMap":{"version":3,"file":"ListService.js","sourceRoot":"","sources":["ListService.ts"],"names":[],"mappings":";;AAAA;IACI;;;OAGG;IACI,aAAa,CAAE,IAAW;QAC7B,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC;IACvC,CAAC;CACJ;AARD,8BAQC","sourcesContent":["export default class ListService {\n    /**\n     * Return random item in list\n     * @param list\n     */\n    public getRandomItem (list: any[]): any {\n        return Math.random() * list.length;\n    }\n}\n"]},"_coverageSchema":"332fd63041d2c1bcb487cc26dd0d5f7d97098a6c","hash":"fc20ac0e283d42440e8b51b10799c4f78038cbc5"}
}
